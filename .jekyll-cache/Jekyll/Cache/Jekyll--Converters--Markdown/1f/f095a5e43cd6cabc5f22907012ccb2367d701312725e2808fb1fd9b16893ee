I"\c<blockquote>
  <p><strong>流程描述</strong>：前台Vue，上传图片至服务端存储，并返回图片地址</p>
</blockquote>

<h3 id="新建工程">新建工程</h3>

<p>这是一个微服务项目，事先已经有了依赖管理的父工程，在此不多作阐述。</p>

<p><img src="http://image.augustrush8.com/images/uploadPro.png" alt="" class="center" /></p>

<h3 id="添加依赖">添加依赖</h3>

<p>添加EurekaClient和web依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>leyou<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>com.leyou.parent<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1.0.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="nt">&lt;groupId&gt;</span>com.leyou.service<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>ly-upload<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>

    <span class="nt">&lt;dependencies&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<h3 id="编写配置">编写配置</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8082</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">upload-service</span>
  <span class="na">servlet</span><span class="pi">:</span>
    <span class="na">multipart</span><span class="pi">:</span>
      <span class="na">max-file-size</span><span class="pi">:</span> <span class="s">5MB</span> <span class="c1"># 限制文件上传的大小</span>
<span class="c1"># Eureka</span>
<span class="na">eureka</span><span class="pi">:</span>
  <span class="na">client</span><span class="pi">:</span>
    <span class="na">service-url</span><span class="pi">:</span>
      <span class="na">defaultZone</span><span class="pi">:</span> <span class="s">http://127.0.0.1:10086/eureka</span>
  <span class="na">instance</span><span class="pi">:</span>
    <span class="na">lease-renewal-interval-in-seconds</span><span class="pi">:</span> <span class="m">5</span> <span class="c1"># 每隔5秒发送一次心跳</span>
    <span class="na">lease-expiration-duration-in-seconds</span><span class="pi">:</span> <span class="m">10</span> <span class="c1"># 10秒不发送就过期</span>
    <span class="na">prefer-ip-address</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">ip-address</span><span class="pi">:</span> <span class="s">127.0.0.1</span>
    <span class="na">instance-id</span><span class="pi">:</span> <span class="s">${spring.application.name}:${server.port}</span>
</code></pre></div></div>

<p>尤其注意下面这一段：添加了限制文件大小的配置</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">upload-service</span>
  <span class="na">servlet</span><span class="pi">:</span>
    <span class="na">multipart</span><span class="pi">:</span>
      <span class="na">max-file-size</span><span class="pi">:</span> <span class="s">5MB</span> <span class="c1"># 限制文件上传的大小</span>
</code></pre></div></div>

<p>启动类的建立不多做阐述。</p>

<h3 id="编写上传功能">编写上传功能</h3>

<h4 id="controller">controller</h4>

<p>编写controller需要知道4个内容：</p>

<ul>
  <li>请求方式：上传肯定是POST</li>
  <li>请求路径：/upload/image</li>
  <li>请求参数：文件，参数名是file，SpringMVC会封装为一个接口：MultipleFile</li>
  <li>返回结果：上传成功后得到的文件的url路径</li>
</ul>

<p>代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"upload"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UploadService</span> <span class="n">uploadService</span><span class="o">;</span>
    <span class="cm">/**
     * 上传图片功能
     * @param file
     * @return
     */</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"image"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">uploadImage</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"file"</span><span class="o">)</span><span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">){</span>
        <span class="nc">String</span> <span class="n">url</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">uploadService</span><span class="o">.</span><span class="na">upload</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="nc">StringUtils</span><span class="o">.</span><span class="na">isBlank</span><span class="o">(</span><span class="n">url</span><span class="o">)){</span>
            <span class="c1">// url为空，证明上传失败</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 返回200，并且携带url路径</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="service">service</h4>

<p>在上传文件过程中，我们需要对上传的内容进行校验：</p>

<ol>
  <li>校验文件大小</li>
  <li>校验文件的媒体类型</li>
  <li>校验文件的内容</li>
</ol>

<p>文件大小在Spring的配置文件中设置，因此已经会被校验，我们不用管。</p>

<p>具体代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span><span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">UploadService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="c1">// 支持的文件类型</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">suffixes</span><span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"image/png"</span><span class="o">,</span><span class="s">"image/jpeg"</span><span class="o">);</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">upload</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">){</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="c1">// 1、图片信息校验</span>
            <span class="c1">// 1)校验文件类型</span>
            <span class="nc">String</span> <span class="n">type</span><span class="o">=</span><span class="n">file</span><span class="o">.</span><span class="na">getContentType</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">suffixes</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">type</span><span class="o">)){</span>
                <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"上传失败，文件类型不匹配：{}"</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">// 2)校验图片内容</span>
            <span class="nc">BufferedImage</span> <span class="n">image</span><span class="o">=</span> <span class="nc">ImageIO</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>
            <span class="k">if</span><span class="o">(</span><span class="n">image</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
                <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"上传失败，文件内容不符合要求"</span><span class="o">);</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">// 2、保存图片</span>
            <span class="c1">// 2.1、生成保存目录</span>
            <span class="nc">File</span> <span class="n">dir</span><span class="o">=</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"D:\\my_project\\idea_pro_inuse\\leyouUpload"</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">dir</span><span class="o">.</span><span class="na">exists</span><span class="o">()){</span>
                <span class="n">dir</span><span class="o">.</span><span class="na">mkdirs</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="c1">// 2.2、保存图片</span>
            <span class="n">file</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">dir</span><span class="o">,</span><span class="n">file</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">()));</span>
            <span class="c1">// 2.3、拼接图片地址</span>
            <span class="nc">String</span> <span class="n">url</span><span class="o">=</span><span class="s">"http://image.leyou.com/upload/"</span><span class="o">+</span><span class="n">file</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
            <span class="k">return</span> <span class="n">url</span><span class="o">;</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>思考：</strong>为什么图片地址需要使用另外的url？</p>

<ul>
  <li>图片不能保存在服务器内部，这样会对服务器产生额外的加载负担</li>
  <li>一般静态资源都应该使用独立域名，这样访问静态资源时不会携带一些不必要的cookie，减小请求的数据量</li>
</ul>

<h3 id="测试上传">测试上传</h3>

<p>这里由于未保存postman提交记录，暂且用其他图片作阐述</p>

<p><img src="http://image.augustrush8.com/images/1526196967376.png" alt="" class="center" /></p>

<p>结果：</p>

<p><img src="http://image.augustrush8.com/images/1526197027688.png" alt="" class="center" /></p>

<h3 id="绕过网关">绕过网关</h3>

<p>图片上传是文件的传输，如果也经过Zuul网关的代理，文件就会经过多次网路传输，造成不必要的网络负担。在高并发时，可能导致网络阻塞，Zuul网关不可用。这样我们的整个系统就瘫痪了。</p>

<p>所以，我们上传文件的请求就不经过网关来处理了。</p>

<h4 id="zuul的路由过滤">Zuul的路由过滤</h4>

<p>Zuul中提供了一个ignored-patterns属性，用来忽略不希望路由的URL路径，示例：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">zuul.ignored-patterns</span><span class="p">:</span> <span class="s">/upload/**</span>
</code></pre></div></div>

<p>路径过滤会对一切微服务进行判定。</p>

<p>Zuul还提供了<code class="highlighter-rouge">ignored-services</code>属性，进行服务过滤：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">zuul.ignored-services</span><span class="p">:</span> <span class="s">upload-servie</span>
</code></pre></div></div>

<p>我们这里采用忽略服务：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">zuul</span><span class="pi">:</span>
  <span class="na">ignored-services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">upload-service</span> <span class="c1"># 忽略upload-service服务</span>
</code></pre></div></div>

<p>上面的配置采用了集合语法，代表可以配置多个</p>

<h4 id="nginx的rewrite指令">Nginx的rewrite指令</h4>

<p>现在，修改页面的访问路径：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;v-upload</span>
      <span class="na">v-model=</span><span class="s">"brand.image"</span> 
      <span class="na">url=</span><span class="s">"/upload/image"</span> 
      <span class="na">:multiple=</span><span class="s">"false"</span> 
      <span class="na">:pic-width=</span><span class="s">"250"</span> <span class="na">:pic-height=</span><span class="s">"90"</span>
      <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>查看页面的请求路径：</p>

<p><img src="http://image.augustrush8.com/images/1526196446765.png" alt="" class="center" /></p>

<p>可以看到这个地址不对，依然是去找Zuul网关，因为我们的系统全局配置了URL地址。怎么办？</p>

<p>有同学会想：修改页面请求地址不就好了。</p>

<p><strong>注意：原则上，我们是不能把除了网关以外的服务对外暴露的，不安全。</strong></p>

<p>既然不能修改页面请求，那么就只能在Nginx反向代理上做文章了。</p>

<p>我们修改nginx配置，将以/api/upload开头的请求拦截下来，转交到真实的服务地址:</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">location</span> <span class="n">/api/upload</span> <span class="p">{</span>
    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8082</span><span class="p">;</span>
    <span class="kn">proxy_connect_timeout</span> <span class="mi">600</span><span class="p">;</span>
    <span class="kn">proxy_read_timeout</span> <span class="mi">600</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这样写大家觉得对不对呢？</p>

<p>显然是不对的，因为ip和端口虽然对了，但是路径没变，依然是：http://127.0.0.1:8002/api/upload/image</p>

<p>前面多了一个/api</p>

<p>Nginx提供了rewrite指令，用于对地址进行重写，语法规则：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rewrite "用来匹配路径的正则" 重写后的路径 [指令];
</code></pre></div></div>

<p>我们的案例：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span>       <span class="mi">80</span><span class="p">;</span>
        <span class="kn">server_name</span>  <span class="s">api.leyou.com</span><span class="p">;</span>

        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Host</span> <span class="nv">$host</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Server</span> <span class="nv">$host</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>

    	<span class="c1"># 上传路径的映射</span>
		<span class="kn">location</span> <span class="n">/api/upload</span> <span class="p">{</span>	
			<span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8082</span><span class="p">;</span>
			<span class="kn">proxy_connect_timeout</span> <span class="mi">600</span><span class="p">;</span>
			<span class="kn">proxy_read_timeout</span> <span class="mi">600</span><span class="p">;</span>
			
			<span class="kn">rewrite</span> <span class="s">"^/api/(.*)</span>$<span class="s">"</span> <span class="n">/</span><span class="nv">$1</span> <span class="s">break</span><span class="p">;</span> 
        <span class="p">}</span>
		
        <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
			<span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:10010</span><span class="p">;</span>
			<span class="kn">proxy_connect_timeout</span> <span class="mi">600</span><span class="p">;</span>
			<span class="kn">proxy_read_timeout</span> <span class="mi">600</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>首先，我们映射路径是/api/upload，而下面一个映射路径是 / ，根据最长路径匹配原则，/api/upload优先级更高。也就是说，凡是以/api/upload开头的路径，都会被第一个配置处理</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">proxy_pass</code>：反向代理，这次我们代理到8082端口，也就是upload-service服务</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">rewrite "^/api/(.*)$" /$1 break</code>，路径重写：</p>

    <ul>
      <li>
        <p><code class="highlighter-rouge">"^/api/(.*)$"</code>：匹配路径的正则表达式，用了分组语法，把<code class="highlighter-rouge">/api/</code>以后的所有部分当做1组</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">/$1</code>：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始），即<code class="highlighter-rouge">/api/</code>后面的所有。这样新的路径就是除去<code class="highlighter-rouge">/api/</code>以外的所有，就达到了去除<code class="highlighter-rouge">/api</code>前缀的目的</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">break</code>：指令，常用的有2个，分别是：last、break</p>

        <ul>
          <li>last：重写路径结束后，将得到的路径重新进行一次路径匹配</li>
          <li>break：重写路径结束后，不再重新匹配路径。</li>
        </ul>

        <p>我们这里不能选择last，否则以新的路径/upload/image来匹配，就不会被正确的匹配到8082端口了</p>
      </li>
    </ul>
  </li>
</ul>

<p>修改完成，输入<code class="highlighter-rouge">nginx -s reload</code>命令重新加载配置。然后再次上传试试。</p>

<h3 id="跨域问题">跨域问题</h3>

<p>重启nginx，再次上传，发现报错了：</p>

<p><img src="http://image.augustrush8.com/images/1526200471676.png" alt="" class="center" /></p>

<p>在upload-service中添加一个CorsFilter即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GlobalCorsConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">CorsFilter</span> <span class="nf">corsFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//1.添加CORS配置信息</span>
        <span class="nc">CorsConfiguration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CorsConfiguration</span><span class="o">();</span>
        <span class="c1">//1) 允许的域,不要写*，否则cookie就无法使用了</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addAllowedOrigin</span><span class="o">(</span><span class="s">"http://manage.leyou.com"</span><span class="o">);</span>
        <span class="c1">//2) 是否发送Cookie信息</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setAllowCredentials</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="c1">//3) 允许的请求方式</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">"OPTIONS"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">"POST"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addAllowedHeader</span><span class="o">(</span><span class="s">"*"</span><span class="o">);</span>

        <span class="c1">//2.添加映射路径，我们拦截一切请求</span>
        <span class="nc">UrlBasedCorsConfigurationSource</span> <span class="n">configSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
        <span class="n">configSource</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">"/**"</span><span class="o">,</span> <span class="n">config</span><span class="o">);</span>

        <span class="c1">//3.返回新的CorsFilter.</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">CorsFilter</span><span class="o">(</span><span class="n">configSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再次测试</p>

<p><img src="http://image.augustrush8.com/images/uploadTest.png" alt="" class="center" /></p>
:ET