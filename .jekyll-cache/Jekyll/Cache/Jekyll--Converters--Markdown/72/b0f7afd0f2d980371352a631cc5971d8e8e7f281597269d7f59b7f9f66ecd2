I"z<h3 id="冒泡排序">冒泡排序</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">solution</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">BubbleSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">//记录冒泡排序右边界</span>
        <span class="kt">int</span> <span class="n">right</span><span class="o">=</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="c1">//循环终止条件</span>
        <span class="k">while</span><span class="o">(</span><span class="n">right</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span>
            <span class="c1">//交换位置标志位</span>
            <span class="kt">int</span> <span class="n">pos</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">start</span><span class="o">&lt;</span><span class="n">right</span><span class="o">;</span><span class="n">start</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">]&gt;</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">]){</span>
                    <span class="n">swap</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">start</span><span class="o">,</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
                    <span class="n">pos</span><span class="o">=</span><span class="n">start</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c1">//更新右边界</span>
            <span class="n">right</span><span class="o">=</span><span class="n">pos</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span><span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
        <span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">]=</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">]=</span><span class="n">temp</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="直接插入排序">直接插入排序</h3>

<p>将一个记录插入到已排序好的有序表中，从而得到一个新的记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">solution</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">InsertSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
        <span class="k">for</span><span class="o">(</span><span class="n">right</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">right</span><span class="o">&lt;</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">right</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">right</span><span class="o">]&lt;</span><span class="n">a</span><span class="o">[</span><span class="n">right</span><span class="o">-</span><span class="mi">1</span><span class="o">]){</span>
                <span class="c1">//记录下待插入的这个数值</span>
                <span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="n">a</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
                <span class="c1">//后移一位</span>
                <span class="n">a</span><span class="o">[</span><span class="n">right</span><span class="o">]=</span><span class="n">a</span><span class="o">[</span><span class="n">right</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
                <span class="c1">//向左侧循环移位比较</span>
                <span class="kt">int</span> <span class="n">left</span><span class="o">=</span><span class="n">right</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">for</span><span class="o">(;</span><span class="n">left</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">temp</span><span class="o">&lt;</span><span class="n">a</span><span class="o">[</span><span class="n">left</span><span class="o">];</span><span class="n">left</span><span class="o">--){</span>
                    <span class="n">a</span><span class="o">[</span><span class="n">left</span><span class="o">+</span><span class="mi">1</span><span class="o">]=</span><span class="n">a</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
                <span class="o">}</span>
                <span class="c1">//找到了正确的插入位置</span>
                <span class="n">a</span><span class="o">[</span><span class="n">left</span><span class="o">+</span><span class="mi">1</span><span class="o">]=</span><span class="n">temp</span><span class="o">;</span>

            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="选择排序">选择排序</h3>

<ol>
  <li>选出最小的元素，与数组第一个位置交换</li>
  <li>选出第i小的元素，与数组第i个位置交换</li>
  <li>直到第n-1个元素，与第n个元素比较为止</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">solution</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">SelectSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">start</span><span class="o">&lt;</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">,</span><span class="n">start</span><span class="o">++){</span>
            <span class="kt">int</span> <span class="n">key</span><span class="o">=</span><span class="n">findMinVAlue</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">start</span><span class="o">);</span>
            <span class="n">swap</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">key</span><span class="o">,</span><span class="n">start</span><span class="o">);</span>
        <span class="o">}</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findMinVAlue</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">start</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">key</span><span class="o">=</span><span class="n">start</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">start</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">]&gt;</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">]){</span>
                <span class="n">key</span><span class="o">=</span><span class="n">a</span><span class="o">[</span><span class="n">key</span><span class="o">]&gt;</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]?</span><span class="nl">i:</span><span class="n">key</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span><span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
        <span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">]=</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">]=</span><span class="n">temp</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="快速排序">快速排序</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">solution</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quickSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
        <span class="n">quickSort0</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">a</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quickSort0</span><span class="o">(</span><span class="kt">int</span> <span class="n">low</span><span class="o">,</span><span class="kt">int</span> <span class="n">high</span><span class="o">,</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">pos</span><span class="o">=</span><span class="n">partition</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">low</span><span class="o">,</span><span class="n">high</span><span class="o">);</span>
            <span class="n">quickSort0</span><span class="o">(</span><span class="n">low</span><span class="o">,</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">a</span><span class="o">);</span>
            <span class="n">quickSort0</span><span class="o">(</span><span class="n">pos</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">high</span><span class="o">,</span><span class="n">a</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">low</span><span class="o">,</span><span class="kt">int</span> <span class="n">high</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">picotKey</span><span class="o">=</span><span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">];</span>
        <span class="k">while</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">){</span>
            <span class="k">while</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">&amp;&amp;</span><span class="n">a</span><span class="o">[</span><span class="n">high</span><span class="o">]&gt;</span><span class="n">picotKey</span><span class="o">){</span>
                <span class="n">high</span><span class="o">--;</span>
            <span class="o">}</span>
            <span class="n">swap</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">low</span><span class="o">,</span><span class="n">high</span><span class="o">);</span>
            <span class="k">while</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">&amp;&amp;</span><span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">]&lt;</span><span class="n">picotKey</span><span class="o">){</span>
                <span class="n">low</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="n">swap</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">low</span><span class="o">,</span><span class="n">high</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">low</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span><span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
        <span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">]=</span><span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">]=</span><span class="n">temp</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="归并排序">归并排序</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">solution</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">mergeSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
        <span class="n">mergeSort0</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">mergeSort0</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">low</span><span class="o">,</span><span class="kt">int</span> <span class="n">high</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">mid</span><span class="o">=(</span><span class="n">low</span><span class="o">+</span><span class="n">high</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
            <span class="n">mergeSort0</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">low</span><span class="o">,</span><span class="n">mid</span><span class="o">);</span>
            <span class="n">mergeSort0</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">high</span><span class="o">);</span>
            <span class="n">merge</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">low</span><span class="o">,</span><span class="n">mid</span><span class="o">,</span><span class="n">high</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mid</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
    
    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">start1</span><span class="o">;</span> <span class="c1">// tmp的初始下标</span>
    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">start1</span><span class="o">;</span> <span class="c1">// 记录初始位置</span>
    <span class="kt">int</span> <span class="n">start2</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 第2个数组的起始位置</span>
    
    <span class="k">for</span><span class="o">(;</span> <span class="n">start1</span> <span class="o">&lt;=</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">start2</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">tmp</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">start1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">start2</span><span class="o">]</span> <span class="o">?</span> <span class="n">a</span><span class="o">[</span><span class="n">start1</span><span class="o">++]</span> <span class="o">:</span> <span class="n">a</span><span class="o">[</span><span class="n">start2</span><span class="o">++];</span>
    <span class="o">}</span>
    
    <span class="c1">// 左边剩余的合并</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">start1</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">tmp</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">start1</span><span class="o">++];</span>
    <span class="o">}</span>
    <span class="c1">// 右边剩余的合并</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">start2</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">tmp</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">start2</span><span class="o">++];</span>
    <span class="o">}</span>
    
    <span class="c1">// 复制数组</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
        <span class="n">start</span><span class="o">++;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="堆排序">堆排序</h3>

<p>堆排序不太好理解，具体参考：https://www.jianshu.com/p/be0c51a798a8 图例说明</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">solution</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">heapSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
        <span class="n">buildHeap</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--){</span>
            <span class="n">swap</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">i</span><span class="o">);</span>
            <span class="n">adjustHeap</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">i</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">a</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">adjustHeap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">s</span><span class="o">,</span><span class="kt">int</span> <span class="n">length</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">tmp</span><span class="o">=</span><span class="n">a</span><span class="o">[</span><span class="n">s</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">child</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="c1">//左孩子节点的位置</span>
        <span class="k">while</span><span class="o">(</span><span class="n">child</span><span class="o">&lt;</span><span class="n">length</span><span class="o">){</span>
            <span class="c1">// 如果有右孩子，同时右孩子值 &gt; 左孩子值</span>
            <span class="k">if</span><span class="o">(</span><span class="n">child</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="n">length</span><span class="o">&amp;&amp;</span><span class="n">a</span><span class="o">[</span><span class="n">child</span><span class="o">]&lt;</span><span class="n">a</span><span class="o">[</span><span class="n">child</span><span class="o">+</span><span class="mi">1</span><span class="o">])}{</span>
                <span class="n">child</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="c1">// 较大的子结点&gt;父节点</span>
            <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">s</span><span class="o">]&lt;</span><span class="n">a</span><span class="o">[</span><span class="n">child</span><span class="o">]){</span>
                <span class="n">a</span><span class="o">[</span><span class="n">s</span><span class="o">]=</span><span class="n">a</span><span class="o">[</span><span class="n">child</span><span class="o">];</span><span class="c1">// 替换父节点</span>
                <span class="n">s</span><span class="o">=</span><span class="n">child</span><span class="o">;</span><span class="c1">// 重新设置，待调整的下一个结点位置</span>
                <span class="n">child</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">a</span><span class="o">[</span><span class="n">s</span><span class="o">]=</span><span class="n">tmp</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="cm">/**
    * 初始堆进行调整 将a[0...length-1]建成堆
    * 调整完后，第一个元素是序列最大的元素
    */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">buildHeap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">length</span><span class="o">){</span>
        <span class="c1">// 最后一个有孩子结点的位置是 i = (length - 1) / 2</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">adjustHeap</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">i</span><span class="o">,</span><span class="n">length</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
        <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

:ET