I"z,<h3 id="题目描述">题目描述</h3>

<p>如果一个数字序列逆置之后跟原序列是一样的就称这样的数字序列为回文序列。例如：
{1, 2, 1}, {15, 78, 78, 15} , {112} 是回文序列, 
{1, 2, 2}, {15, 78, 87, 51} ,{112, 2, 11} 不是回文序列。
现在给出一个数字序列，允许使用一种转换操作：
选择任意两个相邻的数，然后从序列移除这两个数，并用这两个数字的和插入到这两个数之前的位置(只插入一个和)。
现在对于所给序列要求出最少需要多少次操作可以将其变成回文序列。</p>

<p><strong>输入描述</strong>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入为两行，第一行为序列长度n ( 1 ≤ n ≤ 50) 第二行为序列中的n个整数item[i] (1 ≤ iteam[i] ≤ 1000)，以空格分隔。
</code></pre></div></div>

<p><strong>输出描述</strong>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输出一个数，表示最少需要的转换次数
</code></pre></div></div>

<p>示例1</p>

<p>输入</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4 1 1 1 3
</code></pre></div></div>

<p>输出</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
</code></pre></div></div>

<h3 id="解题思路">解题思路</h3>

<p>本题其实是对双指针用法的考察，画一张图就很明白了</p>

<p><img src="http://image.augustrush8.com/images/doubleptr.png" alt="" class="center" /></p>

<h3 id="代码">代码</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leyou</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span><span class="o">=</span><span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="n">n</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span><span class="c1">//多少个数字</span>
        <span class="c1">//初始化数组大小</span>
        <span class="n">arr</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="c1">//接收数组</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">min</span><span class="o">=</span><span class="n">minFind</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minFind</span><span class="o">(){</span>
        <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">end</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="c1">//双指针夹，针对这个问题，需要明白最终一定能够返回一个回文数组</span>
        <span class="c1">//因为到最后最不济就是所有的数组元素都合并为一个数字，这一个数字一定是回文数组</span>
        <span class="k">while</span><span class="o">(</span><span class="n">start</span><span class="o">&lt;</span><span class="n">end</span><span class="o">){</span>
            <span class="c1">//前面小于后面，前面需要融合,同时更新调整次数</span>
            <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">]&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]){</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">]+=</span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
                <span class="n">start</span><span class="o">++;</span>
                <span class="n">count</span><span class="o">++;</span>
            <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">]&gt;</span><span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]){</span><span class="c1">//前面大于后面，后面需要融合,同时更新调整次数</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">-</span><span class="mi">1</span><span class="o">]+=</span><span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
                <span class="n">end</span><span class="o">--;</span>
                <span class="n">count</span><span class="o">++;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span><span class="c1">//前后相等了，双指针各动一步</span>
                <span class="n">start</span><span class="o">++;</span>
                <span class="n">end</span><span class="o">--;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>

    <span class="o">}</span>


<span class="o">}</span>
</code></pre></div></div>

<p>小结一下：</p>

<p>注意以上代码片段</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span><span class="o">(</span><span class="n">start</span><span class="o">&lt;</span><span class="n">end</span><span class="o">){</span>
    <span class="c1">//前面小于后面，前面需要融合,同时更新调整次数</span>
    <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">]&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]){</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">]+=</span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
        <span class="n">start</span><span class="o">++;</span>
        <span class="n">count</span><span class="o">++;</span>
    <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">]&gt;</span><span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]){</span><span class="c1">//前面大于后面，后面需要融合,同时更新调整次数</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">-</span><span class="mi">1</span><span class="o">]+=</span><span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
        <span class="n">end</span><span class="o">--;</span>
        <span class="n">count</span><span class="o">++;</span>
    <span class="o">}</span><span class="k">else</span><span class="o">{</span><span class="c1">//前后相等了，双指针各动一步</span>
        <span class="n">start</span><span class="o">++;</span>
        <span class="n">end</span><span class="o">--;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这就是双指针用法在数组里面的典型应用了，其他还有链表当中的双指针等等，注意总结</p>

<p>还有，以上代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">]&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]){</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">]+=</span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
                <span class="n">start</span><span class="o">++;</span>
                <span class="n">count</span><span class="o">++;</span>
            <span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">if</code>体里面可以写成</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">arr</span><span class="o">[++</span><span class="n">start</span><span class="o">]</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">start</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
<span class="n">count</span><span class="o">++;</span>
</code></pre></div></div>

:ET