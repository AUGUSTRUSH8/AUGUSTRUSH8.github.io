I"PJ<h3 id="目标">目标</h3>
<p>训练一个pix2pix模型，把模糊的图片换成清晰的图片</p>
<h3 id="准备">准备</h3>
<p>租了一个极客云上面的GPU服务器，GTX1070，速度还行</p>
<h3 id="数据集准备">数据集准备</h3>
<p>数据集是“图片对”的形式，一个图片包含两张图片，一张是清晰的图片，一张是模糊的图片。</p>
<h4 id="我的原数据集">我的原数据集</h4>
<p>我用的kaggle上面的花花数据：https://www.kaggle.com/alxmamaev/flowers-recognition</p>
<h4 id="去除错误数据">去除错误数据</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">from</span> <span class="nn">glob</span> <span class="kn">import</span> <span class="n">glob</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="k">def</span> <span class="nf">glob_all</span><span class="p">(</span><span class="n">dir_path</span><span class="p">):</span>
    <span class="n">pic_list</span> <span class="o">=</span> <span class="n">glob</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir_path</span><span class="p">,</span> <span class="s">'*.jpg'</span><span class="p">))</span>
    <span class="n">inside</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">dir_path</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">dir_name</span> <span class="ow">in</span> <span class="n">inside</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir_path</span><span class="p">,</span> <span class="n">dir_name</span><span class="p">)):</span>
            <span class="n">pic_list</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">glob_all</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir_path</span><span class="p">,</span> <span class="n">dir_name</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">pic_list</span>

<span class="k">def</span> <span class="nf">parse_args</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'-p'</span><span class="p">,</span> <span class="s">'--dir-path'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">'data/'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parse_args</span><span class="p">()</span>
    <span class="n">all_pic_list</span> <span class="o">=</span> <span class="n">glob_all</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">dir_path</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">img_path</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">all_pic_list</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">sess</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">img_path</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">img_byte</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
                <span class="n">img</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">decode_jpeg</span><span class="p">(</span><span class="n">img_byte</span><span class="p">)</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">sess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">:</span>
                    <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
                    <span class="k">raise</span> <span class="nb">Exception</span>
            <span class="n">tf</span><span class="o">.</span><span class="n">reset_default_graph</span><span class="p">()</span>
            <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s">'</span><span class="si">%</span><span class="s">s has broken. Delete it.'</span> <span class="o">%</span> <span class="n">img_path</span><span class="p">)</span>
            <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Processing </span><span class="si">%</span><span class="s">d / </span><span class="si">%</span><span class="s">d.'</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_pic_list</span><span class="p">)))</span>
</code></pre></div></div>
<p>运行指令类似如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python delete_broken_img.py <span class="nt">-p</span> 文件目录
</code></pre></div></div>
<h4 id="图像裁剪到统一大小">图像裁剪到统一大小</h4>
<p>主要两个文件：
process.py:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">absolute_import</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>


<span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">tempfile</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">tfimage</span> <span class="k">as</span> <span class="n">im</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">multiprocessing</span>

<span class="n">edge_pool</span> <span class="o">=</span> <span class="bp">None</span>


<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--input_dir"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"path to folder containing images"</span><span class="p">)</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--output_dir"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"output path"</span><span class="p">)</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--operation"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="s">"grayscale"</span><span class="p">,</span> <span class="s">"resize"</span><span class="p">,</span> <span class="s">"blank"</span><span class="p">,</span> <span class="s">"combine"</span><span class="p">,</span> <span class="s">"edges"</span><span class="p">,</span> <span class="s">"blur"</span><span class="p">])</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--workers"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"number of workers"</span><span class="p">)</span>
<span class="c1"># resize
</span><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--pad"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">"store_true"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"pad instead of crop for resize operation"</span><span class="p">)</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--size"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"size to use for resize operation"</span><span class="p">)</span>
<span class="c1"># combine
</span><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--b_dir"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"path to folder containing B images for combine operation"</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">resize</span><span class="p">(</span><span class="n">src</span><span class="p">):</span>
    <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="n">shape</span>
    <span class="n">dst</span> <span class="o">=</span> <span class="n">src</span>
    <span class="k">if</span> <span class="n">height</span> <span class="o">!=</span> <span class="n">width</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">pad</span><span class="p">:</span>
            <span class="n">size</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
            <span class="c1"># pad to correct ratio
</span>            <span class="n">oh</span> <span class="o">=</span> <span class="p">(</span><span class="n">size</span> <span class="o">-</span> <span class="n">height</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">ow</span> <span class="o">=</span> <span class="p">(</span><span class="n">size</span> <span class="o">-</span> <span class="n">width</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">dst</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">pad</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">dst</span><span class="p">,</span> <span class="n">offset_height</span><span class="o">=</span><span class="n">oh</span><span class="p">,</span> <span class="n">offset_width</span><span class="o">=</span><span class="n">ow</span><span class="p">,</span> <span class="n">target_height</span><span class="o">=</span><span class="n">size</span><span class="p">,</span> <span class="n">target_width</span><span class="o">=</span><span class="n">size</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># crop to correct ratio
</span>            <span class="n">size</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
            <span class="n">oh</span> <span class="o">=</span> <span class="p">(</span><span class="n">height</span> <span class="o">-</span> <span class="n">size</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">ow</span> <span class="o">=</span> <span class="p">(</span><span class="n">width</span> <span class="o">-</span> <span class="n">size</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">dst</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">crop</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">dst</span><span class="p">,</span> <span class="n">offset_height</span><span class="o">=</span><span class="n">oh</span><span class="p">,</span> <span class="n">offset_width</span><span class="o">=</span><span class="n">ow</span><span class="p">,</span> <span class="n">target_height</span><span class="o">=</span><span class="n">size</span><span class="p">,</span> <span class="n">target_width</span><span class="o">=</span><span class="n">size</span><span class="p">)</span>

    <span class="k">assert</span><span class="p">(</span><span class="n">dst</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">dst</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="n">size</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">dst</span><span class="o">.</span><span class="n">shape</span>
    <span class="k">if</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">size</span><span class="p">:</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">downscale</span><span class="p">(</span><span class="n">images</span><span class="o">=</span><span class="n">dst</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">[</span><span class="n">a</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">size</span><span class="p">])</span>
    <span class="k">elif</span> <span class="n">size</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="n">size</span><span class="p">:</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">upscale</span><span class="p">(</span><span class="n">images</span><span class="o">=</span><span class="n">dst</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">[</span><span class="n">a</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">size</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">dst</span>


<span class="k">def</span> <span class="nf">blank</span><span class="p">(</span><span class="n">src</span><span class="p">):</span>
    <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="n">shape</span>
    <span class="k">if</span> <span class="n">height</span> <span class="o">!=</span> <span class="n">width</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"non-square image"</span><span class="p">)</span>

    <span class="n">image_size</span> <span class="o">=</span> <span class="n">width</span>
    <span class="n">size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image_size</span> <span class="o">*</span> <span class="mf">0.3</span><span class="p">)</span>
    <span class="n">offset</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image_size</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>

    <span class="n">dst</span> <span class="o">=</span> <span class="n">src</span>
    <span class="n">dst</span><span class="p">[</span><span class="n">offset</span><span class="p">:</span><span class="n">offset</span> <span class="o">+</span> <span class="n">size</span><span class="p">,</span> <span class="n">offset</span><span class="p">:</span><span class="n">offset</span> <span class="o">+</span> <span class="n">size</span><span class="p">,</span> <span class="p">:]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">([</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">dst</span>


<span class="k">def</span> <span class="nf">combine</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">src_path</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">b_dir</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"missing b_dir"</span><span class="p">)</span>

    <span class="c1"># find corresponding file in b_dir, could have a different extension
</span>    <span class="n">basename</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">src_path</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">ext</span> <span class="ow">in</span> <span class="p">[</span><span class="s">".png"</span><span class="p">,</span> <span class="s">".jpg"</span><span class="p">]:</span>
        <span class="n">sibling_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">b_dir</span><span class="p">,</span> <span class="n">basename</span> <span class="o">+</span> <span class="n">ext</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">sibling_path</span><span class="p">):</span>
            <span class="n">sibling</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">sibling_path</span><span class="p">)</span>
            <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"could not find sibling image for "</span> <span class="o">+</span> <span class="n">src_path</span><span class="p">)</span>

    <span class="c1"># make sure that dimensions are correct
</span>    <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="n">shape</span>
    <span class="k">if</span> <span class="n">height</span> <span class="o">!=</span> <span class="n">sibling</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">or</span> <span class="n">width</span> <span class="o">!=</span> <span class="n">sibling</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"differing sizes"</span><span class="p">)</span>

    <span class="c1"># convert both images to RGB if necessary
</span>    <span class="k">if</span> <span class="n">src</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">src</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">grayscale_to_rgb</span><span class="p">(</span><span class="n">images</span><span class="o">=</span><span class="n">src</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">sibling</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">sibling</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">grayscale_to_rgb</span><span class="p">(</span><span class="n">images</span><span class="o">=</span><span class="n">sibling</span><span class="p">)</span>

    <span class="c1"># remove alpha channel
</span>    <span class="k">if</span> <span class="n">src</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
        <span class="n">src</span> <span class="o">=</span> <span class="n">src</span><span class="p">[:,</span> <span class="p">:,</span> <span class="p">:</span><span class="mi">3</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">sibling</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
        <span class="n">sibling</span> <span class="o">=</span> <span class="n">sibling</span><span class="p">[:,</span> <span class="p">:,</span> <span class="p">:</span><span class="mi">3</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">([</span><span class="n">src</span><span class="p">,</span> <span class="n">sibling</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">grayscale</span><span class="p">(</span><span class="n">src</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">im</span><span class="o">.</span><span class="n">grayscale_to_rgb</span><span class="p">(</span><span class="n">images</span><span class="o">=</span><span class="n">im</span><span class="o">.</span><span class="n">rgb_to_grayscale</span><span class="p">(</span><span class="n">images</span><span class="o">=</span><span class="n">src</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">blur</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="n">shape</span>
    <span class="n">height_down</span> <span class="o">=</span> <span class="n">height</span> <span class="o">//</span> <span class="n">scale</span>
    <span class="n">width_down</span> <span class="o">=</span> <span class="n">width</span> <span class="o">//</span> <span class="n">scale</span>
    <span class="n">dst</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">downscale</span><span class="p">(</span><span class="n">images</span><span class="o">=</span><span class="n">src</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">[</span><span class="n">height_down</span><span class="p">,</span> <span class="n">width_down</span><span class="p">])</span>
    <span class="n">dst</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">upscale</span><span class="p">(</span><span class="n">images</span><span class="o">=</span><span class="n">dst</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">[</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">dst</span>

<span class="n">net</span> <span class="o">=</span> <span class="bp">None</span>


<span class="k">def</span> <span class="nf">run_caffe</span><span class="p">(</span><span class="n">src</span><span class="p">):</span>
    <span class="c1"># lazy load caffe and create net
</span>    <span class="k">global</span> <span class="n">net</span>
    <span class="k">if</span> <span class="n">net</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># don't require caffe unless we are doing edge detection
</span>        <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">"GLOG_minloglevel"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"2"</span>  <span class="c1"># disable logging from caffe
</span>        <span class="kn">import</span> <span class="nn">caffe</span>
        <span class="c1"># using this requires using the docker image or assembling a bunch of dependencies
</span>        <span class="c1"># and then changing these hardcoded paths
</span>        <span class="n">net</span> <span class="o">=</span> <span class="n">caffe</span><span class="o">.</span><span class="n">Net</span><span class="p">(</span><span class="s">"/opt/caffe/examples/hed/deploy.prototxt"</span><span class="p">,</span> <span class="s">"/opt/caffe/hed_pretrained_bsds.caffemodel"</span><span class="p">,</span> <span class="n">caffe</span><span class="o">.</span><span class="n">TEST</span><span class="p">)</span>

    <span class="n">net</span><span class="o">.</span><span class="n">blobs</span><span class="p">[</span><span class="s">"data"</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="n">src</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
    <span class="n">net</span><span class="o">.</span><span class="n">blobs</span><span class="p">[</span><span class="s">"data"</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="o">...</span><span class="p">]</span> <span class="o">=</span> <span class="n">src</span>
    <span class="n">net</span><span class="o">.</span><span class="n">forward</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">net</span><span class="o">.</span><span class="n">blobs</span><span class="p">[</span><span class="s">"sigmoid-fuse"</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">,</span> <span class="p">:,</span> <span class="p">:]</span>


<span class="k">def</span> <span class="nf">edges</span><span class="p">(</span><span class="n">src</span><span class="p">):</span>
    <span class="c1"># based on https://github.com/phillipi/pix2pix/blob/master/scripts/edges/batch_hed.py
</span>    <span class="c1"># and https://github.com/phillipi/pix2pix/blob/master/scripts/edges/PostprocessHED.m
</span>    <span class="kn">import</span> <span class="nn">scipy.io</span>
    <span class="n">src</span> <span class="o">=</span> <span class="n">src</span> <span class="o">*</span> <span class="mi">255</span>
    <span class="n">border</span> <span class="o">=</span> <span class="mi">128</span>  <span class="c1"># put a padding around images since edge detection seems to detect edge of image
</span>    <span class="n">src</span> <span class="o">=</span> <span class="n">src</span><span class="p">[:,</span> <span class="p">:,</span> <span class="p">:</span><span class="mi">3</span><span class="p">]</span>  <span class="c1"># remove alpha channel if present
</span>    <span class="n">src</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">pad</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">((</span><span class="n">border</span><span class="p">,</span> <span class="n">border</span><span class="p">),</span> <span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="n">border</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)),</span> <span class="s">"reflect"</span><span class="p">)</span>
    <span class="n">src</span> <span class="o">=</span> <span class="n">src</span><span class="p">[:,</span> <span class="p">:,</span> <span class="p">::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">src</span> <span class="o">-=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">((</span><span class="mf">104.00698793</span><span class="p">,</span> <span class="mf">116.66876762</span><span class="p">,</span> <span class="mf">122.67891434</span><span class="p">))</span>
    <span class="n">src</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="n">transpose</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>

    <span class="c1"># [height, width, channels] =&gt; [batch, channel, height, width]
</span>    <span class="n">fuse</span> <span class="o">=</span> <span class="n">edge_pool</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">run_caffe</span><span class="p">,</span> <span class="p">[</span><span class="n">src</span><span class="p">])</span>
    <span class="n">fuse</span> <span class="o">=</span> <span class="n">fuse</span><span class="p">[</span><span class="n">border</span><span class="p">:</span><span class="o">-</span><span class="n">border</span><span class="p">,</span> <span class="n">border</span><span class="p">:</span><span class="o">-</span><span class="n">border</span><span class="p">]</span>

    <span class="k">with</span> <span class="n">tempfile</span><span class="o">.</span><span class="n">NamedTemporaryFile</span><span class="p">(</span><span class="n">suffix</span><span class="o">=</span><span class="s">".png"</span><span class="p">)</span> <span class="k">as</span> <span class="n">png_file</span><span class="p">,</span> <span class="n">tempfile</span><span class="o">.</span><span class="n">NamedTemporaryFile</span><span class="p">(</span><span class="n">suffix</span><span class="o">=</span><span class="s">".mat"</span><span class="p">)</span> <span class="k">as</span> <span class="n">mat_file</span><span class="p">:</span>
        <span class="n">scipy</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">savemat</span><span class="p">(</span><span class="n">mat_file</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="p">{</span><span class="s">"input"</span><span class="p">:</span> <span class="n">fuse</span><span class="p">})</span>

        <span class="n">octave_code</span> <span class="o">=</span> <span class="s">r"""
E = 1-load(input_path).input;
E = imresize(E, [image_width,image_width]);
E = 1 - E;
E = single(E);
[Ox, Oy] = gradient(convTri(E, 4), 1);
[Oxx, ~] = gradient(Ox, 1);
[Oxy, Oyy] = gradient(Oy, 1);
O = mod(atan(Oyy .* sign(-Oxy) ./ (Oxx + 1e-5)), pi);
E = edgesNmsMex(E, O, 1, 5, 1.01, 1);
E = double(E &gt;= max(eps, threshold));
E = bwmorph(E, 'thin', inf);
E = bwareaopen(E, small_edge);
E = 1 - E;
E = uint8(E * 255);
imwrite(E, output_path);
"""</span>

        <span class="n">config</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
            <span class="n">input_path</span><span class="o">=</span><span class="s">"'</span><span class="si">%</span><span class="s">s'"</span> <span class="o">%</span> <span class="n">mat_file</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">output_path</span><span class="o">=</span><span class="s">"'</span><span class="si">%</span><span class="s">s'"</span> <span class="o">%</span> <span class="n">png_file</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">image_width</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
            <span class="n">threshold</span><span class="o">=</span><span class="mf">25.0</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span>
            <span class="n">small_edge</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="s">"octave"</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">config</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
            <span class="n">args</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="s">"--eval"</span><span class="p">,</span> <span class="s">"</span><span class="si">%</span><span class="s">s=</span><span class="si">%</span><span class="s">s;"</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)])</span>

        <span class="n">args</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="s">"--eval"</span><span class="p">,</span> <span class="n">octave_code</span><span class="p">])</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">STDOUT</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">CalledProcessError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"octave failed"</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"returncode:"</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">returncode</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"output:"</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">output</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">im</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">png_file</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">src_path</span><span class="p">,</span> <span class="n">dst_path</span><span class="p">):</span>
    <span class="n">src</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">src_path</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">operation</span> <span class="o">==</span> <span class="s">"grayscale"</span><span class="p">:</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">grayscale</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">a</span><span class="o">.</span><span class="n">operation</span> <span class="o">==</span> <span class="s">"resize"</span><span class="p">:</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">resize</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">a</span><span class="o">.</span><span class="n">operation</span> <span class="o">==</span> <span class="s">"blank"</span><span class="p">:</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">blank</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">a</span><span class="o">.</span><span class="n">operation</span> <span class="o">==</span> <span class="s">"combine"</span><span class="p">:</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">combine</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">src_path</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">a</span><span class="o">.</span><span class="n">operation</span> <span class="o">==</span> <span class="s">"edges"</span><span class="p">:</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">edges</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">a</span><span class="o">.</span><span class="n">operation</span> <span class="o">==</span> <span class="s">"blur"</span><span class="p">:</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">blur</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"invalid operation"</span><span class="p">)</span>

    <span class="n">im</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="n">dst_path</span><span class="p">)</span>


<span class="n">complete_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
<span class="n">start</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">num_complete</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>


<span class="k">def</span> <span class="nf">complete</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">num_complete</span><span class="p">,</span> <span class="n">rate</span><span class="p">,</span> <span class="n">last_complete</span>

    <span class="k">with</span> <span class="n">complete_lock</span><span class="p">:</span>
        <span class="n">num_complete</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
        <span class="n">elapsed</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">start</span>
        <span class="n">rate</span> <span class="o">=</span> <span class="n">num_complete</span> <span class="o">/</span> <span class="n">elapsed</span>
        <span class="k">if</span> <span class="n">rate</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">remaining</span> <span class="o">=</span> <span class="p">(</span><span class="n">total</span> <span class="o">-</span> <span class="n">num_complete</span><span class="p">)</span> <span class="o">/</span> <span class="n">rate</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">remaining</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">d/</span><span class="si">%</span><span class="s">d complete  </span><span class="si">%0.2</span><span class="s">f images/sec  </span><span class="si">%</span><span class="s">dm</span><span class="si">%</span><span class="s">ds elapsed  </span><span class="si">%</span><span class="s">dm</span><span class="si">%</span><span class="s">ds remaining"</span> <span class="o">%</span> <span class="p">(</span><span class="n">num_complete</span><span class="p">,</span> <span class="n">total</span><span class="p">,</span> <span class="n">rate</span><span class="p">,</span> <span class="n">elapsed</span> <span class="o">//</span> <span class="mi">60</span><span class="p">,</span> <span class="n">elapsed</span> <span class="o">%</span> <span class="mi">60</span><span class="p">,</span> <span class="n">remaining</span> <span class="o">//</span> <span class="mi">60</span><span class="p">,</span> <span class="n">remaining</span> <span class="o">%</span> <span class="mi">60</span><span class="p">))</span>

        <span class="n">last_complete</span> <span class="o">=</span> <span class="n">now</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">output_dir</span><span class="p">):</span>
        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">output_dir</span><span class="p">)</span>

    <span class="n">src_paths</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">dst_paths</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">skipped</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">src_path</span> <span class="ow">in</span> <span class="n">im</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">input_dir</span><span class="p">):</span>
        <span class="n">name</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">src_path</span><span class="p">))</span>
        <span class="n">dst_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">output_dir</span><span class="p">,</span> <span class="n">name</span> <span class="o">+</span> <span class="s">".png"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">dst_path</span><span class="p">):</span>
            <span class="n">skipped</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">src_paths</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">src_path</span><span class="p">)</span>
            <span class="n">dst_paths</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dst_path</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">"skipping </span><span class="si">%</span><span class="s">d files that already exist"</span> <span class="o">%</span> <span class="n">skipped</span><span class="p">)</span>

    <span class="k">global</span> <span class="n">total</span>
    <span class="n">total</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">src_paths</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">"processing </span><span class="si">%</span><span class="s">d files"</span> <span class="o">%</span> <span class="n">total</span><span class="p">)</span>

    <span class="k">global</span> <span class="n">start</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">operation</span> <span class="o">==</span> <span class="s">"edges"</span><span class="p">:</span>
        <span class="c1"># use a multiprocessing pool for this operation so it can use multiple CPUs
</span>        <span class="c1"># create the pool before we launch processing threads
</span>        <span class="k">global</span> <span class="n">edge_pool</span>
        <span class="n">edge_pool</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Pool</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">workers</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">workers</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">src_path</span><span class="p">,</span> <span class="n">dst_path</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">src_paths</span><span class="p">,</span> <span class="n">dst_paths</span><span class="p">):</span>
                <span class="n">process</span><span class="p">(</span><span class="n">src_path</span><span class="p">,</span> <span class="n">dst_path</span><span class="p">)</span>
                <span class="n">complete</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">queue</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">input_producer</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">src_paths</span><span class="p">,</span> <span class="n">dst_paths</span><span class="p">),</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">num_epochs</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">dequeue_op</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">dequeue</span><span class="p">()</span>

        <span class="k">def</span> <span class="nf">worker</span><span class="p">(</span><span class="n">coord</span><span class="p">):</span>
            <span class="k">with</span> <span class="n">sess</span><span class="o">.</span><span class="n">as_default</span><span class="p">():</span>
                <span class="k">while</span> <span class="ow">not</span> <span class="n">coord</span><span class="o">.</span><span class="n">should_stop</span><span class="p">():</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">src_path</span><span class="p">,</span> <span class="n">dst_path</span> <span class="o">=</span> <span class="n">sess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">dequeue_op</span><span class="p">)</span>
                    <span class="k">except</span> <span class="n">tf</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">OutOfRangeError</span><span class="p">:</span>
                        <span class="n">coord</span><span class="o">.</span><span class="n">request_stop</span><span class="p">()</span>
                        <span class="k">break</span>

                    <span class="n">process</span><span class="p">(</span><span class="n">src_path</span><span class="p">,</span> <span class="n">dst_path</span><span class="p">)</span>
                    <span class="n">complete</span><span class="p">()</span>

        <span class="c1"># init epoch counter for the queue
</span>        <span class="n">local_init_op</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">local_variables_initializer</span><span class="p">()</span>
        <span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span>
            <span class="n">sess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">local_init_op</span><span class="p">)</span>

            <span class="n">coord</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">Coordinator</span><span class="p">()</span>
            <span class="n">threads</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">start_queue_runners</span><span class="p">(</span><span class="n">coord</span><span class="o">=</span><span class="n">coord</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">workers</span><span class="p">):</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">coord</span><span class="p">,))</span>
                <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
                <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">coord</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">threads</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
                <span class="n">coord</span><span class="o">.</span><span class="n">request_stop</span><span class="p">()</span>
                <span class="n">coord</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">threads</span><span class="p">)</span>

<span class="n">main</span><span class="p">()</span>

</code></pre></div></div>
<p>tfimage.py：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">absolute_import</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>

<span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">import</span> <span class="nn">os</span>


<span class="k">def</span> <span class="nf">create_op</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="o">**</span><span class="n">placeholders</span><span class="p">):</span>
    <span class="n">op</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">**</span><span class="n">placeholders</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">feed_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">argname</span><span class="p">,</span> <span class="n">argvalue</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
            <span class="n">placeholder</span> <span class="o">=</span> <span class="n">placeholders</span><span class="p">[</span><span class="n">argname</span><span class="p">]</span>
            <span class="n">feed_dict</span><span class="p">[</span><span class="n">placeholder</span><span class="p">]</span> <span class="o">=</span> <span class="n">argvalue</span>
        <span class="k">return</span> <span class="n">tf</span><span class="o">.</span><span class="n">get_default_session</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">feed_dict</span><span class="o">=</span><span class="n">feed_dict</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">f</span>

<span class="n">downscale</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">resize_images</span><span class="p">,</span>
    <span class="n">images</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">]),</span>
    <span class="n">size</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">]),</span>
    <span class="n">method</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">ResizeMethod</span><span class="o">.</span><span class="n">AREA</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">upscale</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">resize_images</span><span class="p">,</span>
    <span class="n">images</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">]),</span>
    <span class="n">size</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">]),</span>
    <span class="n">method</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">ResizeMethod</span><span class="o">.</span><span class="n">BICUBIC</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">decode_jpeg</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">decode_jpeg</span><span class="p">,</span>
    <span class="n">contents</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">string</span><span class="p">),</span>
<span class="p">)</span>

<span class="n">decode_png</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">decode_png</span><span class="p">,</span>
    <span class="n">contents</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">string</span><span class="p">),</span>
<span class="p">)</span>

<span class="n">rgb_to_grayscale</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">rgb_to_grayscale</span><span class="p">,</span>
    <span class="n">images</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">),</span>
<span class="p">)</span>

<span class="n">grayscale_to_rgb</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">grayscale_to_rgb</span><span class="p">,</span>
    <span class="n">images</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">),</span>
<span class="p">)</span>

<span class="n">encode_jpeg</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">encode_jpeg</span><span class="p">,</span>
    <span class="n">image</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">uint8</span><span class="p">),</span>
<span class="p">)</span>

<span class="n">encode_png</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">encode_png</span><span class="p">,</span>
    <span class="n">image</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">uint8</span><span class="p">),</span>
<span class="p">)</span>

<span class="n">crop</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">crop_to_bounding_box</span><span class="p">,</span>
    <span class="n">image</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">),</span>
    <span class="n">offset_height</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[]),</span>
    <span class="n">offset_width</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[]),</span>
    <span class="n">target_height</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[]),</span>
    <span class="n">target_width</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[]),</span>
<span class="p">)</span>

<span class="n">pad</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">pad_to_bounding_box</span><span class="p">,</span>
    <span class="n">image</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">),</span>
    <span class="n">offset_height</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[]),</span>
    <span class="n">offset_width</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[]),</span>
    <span class="n">target_height</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[]),</span>
    <span class="n">target_width</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">int32</span><span class="p">,</span> <span class="p">[]),</span>
<span class="p">)</span>

<span class="n">to_uint8</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">convert_image_dtype</span><span class="p">,</span>
    <span class="n">image</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">),</span>
    <span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">uint8</span><span class="p">,</span>
    <span class="n">saturate</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">to_float32</span> <span class="o">=</span> <span class="n">create_op</span><span class="p">(</span>
    <span class="n">func</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">convert_image_dtype</span><span class="p">,</span>
    <span class="n">image</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">uint8</span><span class="p">),</span>
    <span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">,</span>
<span class="p">)</span>


<span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">contents</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
        
    <span class="n">_</span><span class="p">,</span> <span class="n">ext</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>

    <span class="k">if</span> <span class="n">ext</span> <span class="o">==</span> <span class="s">".jpg"</span><span class="p">:</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">decode_jpeg</span><span class="p">(</span><span class="n">contents</span><span class="o">=</span><span class="n">contents</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">ext</span> <span class="o">==</span> <span class="s">".png"</span><span class="p">:</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">decode_png</span><span class="p">(</span><span class="n">contents</span><span class="o">=</span><span class="n">contents</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"invalid image suffix"</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">to_float32</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">image</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">ext</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">filename</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">ext</span> <span class="o">==</span> <span class="s">".jpg"</span> <span class="ow">or</span> <span class="n">ext</span> <span class="o">==</span> <span class="s">".png"</span><span class="p">:</span>
            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span>
    <span class="n">result</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">result</span>


<span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">_</span><span class="p">,</span> <span class="n">ext</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">to_uint8</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">image</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">ext</span> <span class="o">==</span> <span class="s">".jpg"</span><span class="p">:</span>
        <span class="n">encoded</span> <span class="o">=</span> <span class="n">encode_jpeg</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">image</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">ext</span> <span class="o">==</span> <span class="s">".png"</span><span class="p">:</span>
        <span class="n">encoded</span> <span class="o">=</span> <span class="n">encode_png</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">image</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"invalid image suffix"</span><span class="p">)</span>

    <span class="n">dirname</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">dirname</span> <span class="o">!=</span> <span class="s">""</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">dirname</span><span class="p">):</span>
        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">replace</span><span class="p">:</span>
            <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"file already exists at "</span> <span class="o">+</span> <span class="n">path</span><span class="p">)</span>

    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">encoded</span><span class="p">)</span>

</code></pre></div></div>
<p>运行指令类似下面：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python process.py <span class="nt">--input_dir</span> 上步处理完的文件目录 <span class="nt">--operation</span> resize <span class="nt">--output_dir</span> 自己定义一个输出文件夹
</code></pre></div></div>
<h4 id="制作对应要求的图片对">制作对应要求的图片对</h4>
<p>代码在：https://github.com/hzy46/Deep-Learning-21-Examples/blob/master/chapter_10/
第十章的代码，对应的处理代码在chapter10/pix2pix-tensorflow/tools下，需要的两个处理脚本与上面的两个脚本同名。下载下来放到对应文件夹就好。</p>
<ul>
  <li>模糊处理命令
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python process.py <span class="nt">--operation</span> blur <span class="nt">--input_dir</span> resize后的文件目录 <span class="nt">--output_dir</span> 自定义一个输出文件夹
</code></pre></div>    </div>
  </li>
  <li>原始图片和模糊图片合并在一起命令
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python process.py <span class="nt">--input_dir</span> resize后的文件夹 <span class="nt">--b_dir</span> 上面模糊操作后的输出文件夹 <span class="nt">--operation</span> combine <span class="nt">--output_dir</span> 自定义输出文件夹
</code></pre></div>    </div>
  </li>
  <li>分为训练集和测试集（split.py同样在之前的GitHub地址）
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python split.py <span class="nt">--dir</span> 上面的合并后输出文件夹
</code></pre></div>    </div>
    <h4 id="最后的生成结果类似下面">最后的生成结果类似下面</h4>
    <p><img src="https://upload-images.jianshu.io/upload_images/10780978-ae1bfb6541e4392e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" class="center" />
<img src="https://upload-images.jianshu.io/upload_images/10780978-047a775d6d633091.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" class="center" /></p>
  </li>
</ul>

<h3 id="训练模型pix2pixpy还是在上面github地址">训练模型（pix2pix.py还是在上面GitHub地址）</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python pix2pix.py <span class="nt">--mode</span> train <span class="nt">--output_dir</span> 自定义模型输出模型路径 <span class="nt">--max_epochs</span> 20 <span class="nt">--input_dir</span> 上面输出的训练文件夹 <span class="nt">--which_direction</span> BtoA
</code></pre></div></div>
<h3 id="模型迭代">模型迭代</h3>
<p>由于我把终端给关了，就不截图了，最后云端打包下来是这样的形式：
<img src="https://upload-images.jianshu.io/upload_images/10780978-3b2dabef3af9175d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" class="center" /></p>

<h3 id="测试模型">测试模型</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python pix2pix.py <span class="nt">--mode</span> <span class="nb">test</span> <span class="nt">--output_dir</span> 自定义输出文件夹 <span class="nt">--input_dir</span> 之前生成的验证数据集目录 <span class="nt">--checkpoint</span> 之前自定义的模型输出文件夹
</code></pre></div></div>
<h3 id="结果展示">结果展示</h3>
<p><img src="https://upload-images.jianshu.io/upload_images/10780978-5cdce9bb3cce775d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" class="center" />
左边是模糊的，中间是模型生成的，右边是原图，效果不是特别好，之前看了看我的模型，后面收敛的不是很好，但差不多就这意思了，另外我的数据集也不太好，仅作借鉴</p>
:ET