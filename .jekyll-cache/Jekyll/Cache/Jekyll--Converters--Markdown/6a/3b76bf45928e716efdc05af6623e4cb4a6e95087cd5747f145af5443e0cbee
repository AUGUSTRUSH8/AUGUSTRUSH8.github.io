I"ß<p>《漫画算法：小灰的算法之旅》这本书很好，作者将很多苦涩难懂的算法知识以对话漫画的形式一步一步剖析并给出对应示例代码，比起某一些教条式的阐述分析解更能让人接受吸收，具体的可以去看原书。下面我将针对其中的某些点进行记录总结，由于这方面我已经有了一些自己的知识沉淀，所以并不是从头到尾按顺序阅读的，所以主要按照我自己的跳跃式阅读节奏看的。</p>

<h3 id="如何实现抢红包算法">如何实现抢红包算法</h3>

<p>这个问题是我个人在面试阿里三面的时候面试官给的一道题，所以比较感兴趣这其中的一些思考和解法，先看看这道题。</p>

<blockquote>
  <p><strong>需求阐述</strong>：“双十一” 快要到了， 我们需要上线一个发放红包的功能。 这个功能类似于微信群发红包的功能。 例如一个人在群里发了100块钱的红包， 群里有10个人一起来抢红包， <strong>每人抢到的金额随机分配</strong>。</p>

  <p><strong>要求</strong>：</p>

  <ol>
    <li>所有人抢到的金额之和要等于红包金额，不能多也不能少。</li>
    <li>每个人至少抢到1分钱。</li>
    <li>要保证红包拆分的金额尽可能分布均衡，不要出现两极分化太严重的情况。</li>
  </ol>
</blockquote>

<p><strong>base解法</strong>：每次拆分的金额 = 随机区间[1分, 剩余金额-1分]</p>

<p>其实以上并不能称之为base解法，因为base解法是要能够完成对应需求要求的解法，但实际上述解法并没有，但这个解法非常直观，由它去衍生别的解法比较好。</p>

<p>那么以上解法有什么问题？它随机的结果不均衡（结合每次随机的区间均值去分析就好了）</p>

<p><strong>better解法</strong>：二倍均值法</p>

<p>假设剩余红包金额为m元，剩余人数为n，那么有如下公式。
每次抢到的金额 = 随机区间 [0.01， m /n × 2 - 0.01]元</p>

<p>以上算法就解决了不公平的问题，同样使用以上的区间均值法去分析就知道为什么公平了</p>

<p>code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
* 拆分红包
* @param totalAmount 总金额（以分为单位）
* @param totalPeopleNum 总人数
*/</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">divideRedPackage</span><span class="o">(</span><span class="nc">Integer</span>
	<span class="n">totalAmount</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">totalPeopleNum</span><span class="o">){</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">amountList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
	<span class="nc">Integer</span> <span class="n">restAmount</span> <span class="o">=</span> <span class="n">totalAmount</span><span class="o">;</span>
	<span class="nc">Integer</span> <span class="n">restPeopleNum</span> <span class="o">=</span> <span class="n">totalPeopleNum</span><span class="o">;</span>
	<span class="nc">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">totalPeopleNum</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
 <span class="c1">//随机范围：[1，剩余人均金额的2倍-1] 分</span>
		<span class="kt">int</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">restAmount</span> <span class="o">/</span>
			<span class="n">restPeopleNum</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
		<span class="n">restAmount</span> <span class="o">-=</span> <span class="n">amount</span><span class="o">;</span>
		<span class="n">restPeopleNum</span> <span class="o">--;</span>
		<span class="n">amountList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="n">amountList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">restAmount</span><span class="o">);</span>
	<span class="k">return</span> <span class="n">amountList</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">amountList</span> <span class="o">=</span> <span class="n">divideRedPackage</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
	<span class="k">for</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">amount</span> <span class="o">:</span> <span class="n">amountList</span><span class="o">){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">" 抢到金额："</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="n">amount</span><span class="o">).</span>
			<span class="n">divide</span><span class="o">(</span><span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="mi">100</span><span class="o">)));</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个算法有什么问题？它每次抢到的金额都要小于剩余人均金额的2倍 ，并不是完全自由的随机抢红包。</p>

<p><strong>better better解法</strong>：线段树解法</p>

<p>这个解法就能既做到<strong>公平</strong>，又<strong>不超过总金额</strong>，还能<strong>提高随机抢红包的自由度</strong>呢</p>

<p>其思想就主要是将整个待分金额想象成为一根线段，要把它分给n个人，只需要在这个线段的中间随机砍n-1次即可，随机的范围是[1,m-1] （m为红包金额），需要注意的就是随机点重复的问题。</p>

<p>demo code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">generatePacketsByLineCutting</span><span class="o">(</span><span class="kt">int</span> <span class="n">people</span><span class="o">,</span> <span class="kt">int</span> <span class="n">money</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">packets</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="nc">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
    <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">points</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;();</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">people</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">points</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">money</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="n">points</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">money</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">pre</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span> <span class="o">:</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">packets</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">pre</span><span class="o">);</span>
        <span class="n">pre</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">packets</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="二叉树的深度遍历和广度遍历">二叉树的深度遍历和广度遍历</h3>

<p>深度遍历很明显就是一种类似于栈操作的过程，其主要有非递归和递归两种解法，递归的解法非常直观易懂，如下简单的前序遍历递归表示：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 二叉树前序遍历
 * @param node 二叉树节点
 */</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">preOrderTraveral</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">node</span><span class="o">){</span>
       <span class="k">if</span><span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
           <span class="k">return</span><span class="o">;</span>
       <span class="o">}</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
       <span class="n">preOrderTraveral</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">leftChild</span><span class="o">);</span>
       <span class="n">preOrderTraveral</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">rightChild</span><span class="o">);</span>
   <span class="o">}</span>
</code></pre></div></div>

<p>那么怎么用非递归解答这样的问题呢，如下，这个需要多理解练习，看一遍不够。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">preOrderTraveralWithStack</span><span class="o">(</span><span class="nc">Node</span> <span class="n">root</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">nodeStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">root</span><span class="o">!=</span><span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">nodeStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">root</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">getVal</span><span class="o">());</span>
                <span class="n">nodeStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">getLeft</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">nodeStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                <span class="nc">Node</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">nodeStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">getRight</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>二叉树的层次遍历就没那么烧脑了，非常纯粹的队列操作，demo代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">levelOrderTraversal</span><span class="o">(</span><span class="nc">Node</span> <span class="n">root</span><span class="o">){</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span><span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="nc">Node</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">getVal</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">getLeft</span><span class="o">()!=</span><span class="kc">null</span><span class="o">){</span>
                <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">getLeft</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">getRight</span><span class="o">()!=</span><span class="kc">null</span><span class="o">){</span>
                <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">getRight</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<h3 id="看看二叉堆的存储数据结构和衍生品">看看二叉堆的存储数据结构和衍生品</h3>

<p>二叉堆，本质上是一颗完全二叉树，分为两个类型：</p>

<ul>
  <li>最大堆（任何一个父节点的值， 都大于或等于它左、 右孩子节点的值 ）</li>
  <li>最小堆（任何一个父节点的值， 都小于或等于它左、 右孩子节点的值 ）</li>
</ul>

<p>二叉堆的自我调整：</p>

<ul>
  <li>插入节点</li>
  <li>删除节点</li>
  <li>构建二叉堆</li>
</ul>

<p>主要包括两个动作：<strong>上浮+下沉</strong></p>

<p>二叉堆虽然是一个完全二叉树， 但它的存储方式并不是链式存储， 而是顺序存储。 换句话说， <strong>二叉堆的所有节点都存储在数组中</strong></p>

<p>衍生品？  <strong>优先队列</strong></p>

<p>其主要代码示意如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PriorityQueue</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">PriorityQueue</span><span class="o">(){</span>
        <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">32</span><span class="o">];</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">enqueue</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">size</span><span class="o">&gt;=</span><span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>
            <span class="n">resize</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">array</span><span class="o">[</span><span class="n">size</span><span class="o">++]=</span><span class="n">key</span><span class="o">;</span>
        <span class="n">upAdjust</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="c1">//上浮操作</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">upAdjust</span><span class="o">(){</span>
        <span class="kt">int</span> <span class="n">childIndex</span> <span class="o">=</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">parentIndex</span><span class="o">=</span> <span class="o">(</span><span class="n">childIndex</span><span class="o">-</span><span class="mi">1</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">childIndex</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">currVal</span><span class="o">=</span><span class="n">array</span><span class="o">[</span><span class="n">childIndex</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">parentVal</span><span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">parentIndex</span><span class="o">];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">currVal</span><span class="o">&lt;</span><span class="n">parentVal</span><span class="o">){</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">childIndex</span><span class="o">];</span>
            <span class="n">array</span><span class="o">[</span><span class="n">childIndex</span><span class="o">]=</span> <span class="n">array</span><span class="o">[</span><span class="n">parentIndex</span><span class="o">];</span>
            <span class="n">array</span><span class="o">[</span><span class="n">parentIndex</span><span class="o">]=</span><span class="n">temp</span><span class="o">;</span>
            <span class="n">childIndex</span><span class="o">=</span><span class="n">parentIndex</span><span class="o">;</span>
            <span class="n">parentIndex</span><span class="o">=</span><span class="n">childIndex</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>

        <span class="o">}</span>

    <span class="o">}</span>
    <span class="c1">//下沉操作</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">downAdjust</span><span class="o">(){</span>
        <span class="kt">int</span> <span class="n">parentIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">childIndex</span> <span class="o">=</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">parentIndex</span><span class="o">];</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">childIndex</span><span class="o">&lt;</span><span class="n">size</span><span class="o">){</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">childIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="n">size</span> <span class="o">&amp;&amp;</span> <span class="n">array</span><span class="o">[</span><span class="n">childIndex</span><span class="o">]&lt;</span><span class="n">array</span><span class="o">[</span><span class="n">childIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">]){</span>
                <span class="n">childIndex</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">temp</span><span class="o">&gt;</span><span class="n">array</span><span class="o">[</span><span class="n">childIndex</span><span class="o">]){</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">array</span><span class="o">[</span><span class="n">parentIndex</span><span class="o">]=</span><span class="n">array</span><span class="o">[</span><span class="n">childIndex</span><span class="o">];</span>
            <span class="n">parentIndex</span><span class="o">=</span> <span class="n">childIndex</span><span class="o">;</span>
            <span class="n">childIndex</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">childIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">array</span><span class="o">[</span><span class="n">parentIndex</span><span class="o">]=</span><span class="n">temp</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">resize</span><span class="o">(){</span>
        <span class="kt">int</span> <span class="n">newSize</span><span class="o">=</span> <span class="n">size</span><span class="o">*</span><span class="mi">2</span><span class="o">;</span>
        <span class="n">array</span><span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">array</span><span class="o">,</span><span class="n">newSize</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="几个典型的排序算法">几个典型的排序算法</h3>

<p>事实上，冒泡排序是有很多的优化步骤的，下面是一段不错的优化后冒泡排序算法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bubbleSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">){</span>
    	<span class="c1">//记录上次发生交换的位置</span>
        <span class="kt">int</span> <span class="n">lastExchangeIndex</span><span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    	<span class="c1">//记录基本有序位置，也就是后面在进行比较的时候可以停止比较的位置</span>
        <span class="kt">int</span> <span class="n">sortBoarder</span><span class="o">=</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="err">、</span>
            <span class="c1">//每次大循环的时候，先把已经有序标志置为true，这样，只有没有发生交换，将直接跳出循环</span>
            <span class="kt">boolean</span> <span class="n">sorted</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">sortBoarder</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>	
                <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]&gt;</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]){</span>
                    <span class="n">temp</span><span class="o">=</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
                    <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]=</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
                    <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]=</span><span class="n">temp</span><span class="o">;</span>
                    <span class="n">sorted</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
                    <span class="n">lastExchangeIndex</span><span class="o">=</span><span class="n">j</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">sortBoarder</span> <span class="o">=</span> <span class="n">lastExchangeIndex</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">sorted</span><span class="o">){</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<h3 id="求最大公约数">求最大公约数</h3>

<p>这个是我们小学得时候就接触到的一个简单算法，那么拿到这么一个问题心中第一个直观得想法是什么呢？用暴力枚举法去试！看看代码</p>

<ul>
  <li>base?</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getGreatestCommonDivisor</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
    <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a:</span><span class="n">b</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">small</span> <span class="o">=</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a:</span><span class="n">b</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">big</span><span class="o">%</span><span class="n">small</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">small</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span> <span class="n">small</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">small</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">big</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="o">){</span>
            <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>better?</li>
</ul>

<p>以前我们学习过的<strong>辗转相除法</strong></p>

<p>这条算法基于一个定理： <strong>两个正整数a和b（ a&gt;b） ， 它们的最大公约数等于a除以b的余数c和b之间的最大公约数。</strong></p>

<p>看看代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getGreatestCommonDivisorV2</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
    <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a:</span><span class="n">b</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">small</span> <span class="o">=</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a:</span><span class="n">b</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">big</span><span class="o">%</span><span class="n">small</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">small</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="nf">getGreatestCommonDivisorV2</span><span class="o">(</span><span class="n">big</span><span class="o">%</span><span class="n">small</span><span class="o">,</span> <span class="n">small</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>better better?</li>
</ul>

<p>以上代码存在什么问题？取余运算有些损耗性能，怎么改进？<strong>更相减损术</strong></p>

<p>它的原理更加简单： <strong>两个正整数a和b（ a&gt;b） ， 它们的最大公约数等于a-b的差值c和较小数b的最大公约数。</strong> 例如10和25， 25减10的差是15， 那么10和25的最大公约数， 等同于10和15的最大公约数。</p>

<p>看看代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getGreatestCommonDivisorV3</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a:</span><span class="n">b</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">small</span> <span class="o">=</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a:</span><span class="n">b</span><span class="o">;</span>
    <span class="k">return</span> <span class="nf">getGreatestCommonDivisorV3</span><span class="o">(</span><span class="n">big</span><span class="o">-</span><span class="n">small</span><span class="o">,</span> <span class="n">small</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>better better better?</li>
</ul>

<p>以上代码存在什么问题？如果要求（1000，1）的最大公约数，要减多少次啊？怎么改进，<strong>辗转相除法和更相减损术相结合，同时使用位运算</strong></p>

<p>规则：</p>

<blockquote>
  <p>当a和b均为偶数时， gcd(a,b) = 2× gcd(a/2, b/2) = 2× gcd(a»1,b»1)。
当a为偶数， b为奇数时， gcd(a,b) = gcd(a/2,b) = gcd(a»1,b)。
当a为奇数， b为偶数时， gcd(a,b) = gcd(a,b/2) = gcd(a,b»1)。
当a和b均为奇数时， 先利用更相减损术运算一次， gcd(a,b) = gcd(b,a-b)， 此
时a-b必然是偶数， 然后又可以继续进行移位运算。</p>
</blockquote>

<p>代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">gcd</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">((</span><span class="n">a</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">)==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">b</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">)==</span><span class="mi">0</span><span class="o">){</span>
        <span class="k">return</span> <span class="nf">gcd</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="o">)&lt;&lt;</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">((</span><span class="n">a</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">)==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">b</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">)!=</span><span class="mi">0</span><span class="o">){</span>
        <span class="k">return</span> <span class="nf">gcd</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">((</span><span class="n">a</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">)!=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">b</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">)==</span><span class="mi">0</span><span class="o">){</span>
       <span class="k">return</span> <span class="nf">gcd</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="o">);</span>
   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
       <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a:</span><span class="n">b</span><span class="o">;</span>
       <span class="kt">int</span> <span class="n">small</span> <span class="o">=</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a:</span><span class="n">b</span><span class="o">;</span>
       <span class="k">return</span> <span class="nf">gcd</span><span class="o">(</span><span class="n">big</span><span class="o">-</span><span class="n">small</span><span class="o">,</span> <span class="n">small</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上述代码中， 判断整数奇偶性的方式是让整数和1进行与运算， 如果(a&amp;1)==0， 则说明整数a是偶数； 如果(a&amp;1)!=0， 则说明整数a是奇数。</p>

:ET