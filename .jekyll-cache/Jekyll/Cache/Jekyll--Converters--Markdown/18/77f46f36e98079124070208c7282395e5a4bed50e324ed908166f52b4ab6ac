I"I:<blockquote>
  <p>又是一次算法练习，主要知识点是深度优先搜索，递归调用，回溯。</p>
</blockquote>

<h3 id="题目描述">题目描述</h3>

<p>小青蛙有一天不小心落入了一个地下迷宫,小青蛙希望用自己仅剩的体力值P跳出这个地下迷宫。为了让问题简单,假设这是一个n*m的格子迷宫,迷宫每个位置为0或者1,0代表这个位置有障碍物,小青蛙达到不了这个位置;1代表小青蛙可以达到的位置。小青蛙初始在(0,0)位置,地下迷宫的出口在(0,m-1)(保证这两个位置都是1,并且保证一定有起点到终点可达的路径),小青蛙在迷宫中水平移动一个单位距离需要消耗1点体力值,向上爬一个单位距离需要消耗3个单位的体力值,向下移动不消耗体力值,当小青蛙的体力值等于0的时候还没有到达出口,小青蛙将无法逃离迷宫。现在需要你帮助小青蛙计算出能否用仅剩的体力值跳出迷宫(即达到(0,m-1)位置)。</p>

<p><strong>输入描述</strong>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入包括n+1行:
 第一行为三个整数n,m(3 <span class="err">&lt;</span>= m,n <span class="err">&lt;</span>= 10),P(1 <span class="err">&lt;</span>= P <span class="err">&lt;</span>= 100)
 接下来的n行:
 每行m个0或者1,以空格分隔
</code></pre></div></div>

<p><strong>输出描述</strong>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>如果能逃离迷宫,则输出一行体力消耗最小的路径,输出格式见样例所示;如果不能逃离迷宫,则输出"Can not escape!"。 测试数据保证答案唯一
</code></pre></div></div>

<p><strong>示例</strong>：</p>

<p>输入</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4 4 10 1 0 0 1 1 1 0 1 0 1 1 1 0 0 1 1
</code></pre></div></div>

<p>输出</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[0,0],[1,0],[1,1],[2,1],[2,2],[2,3],[1,3],[0,3]
</code></pre></div></div>

<h3 id="解决方案">解决方案</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leyou</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">m</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">p</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">maxRemainEnergy</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">flag</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">String</span> <span class="n">res</span><span class="o">=</span><span class="s">""</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="c1">//接收输入</span>
        <span class="n">m</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">n</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">p</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">p</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">flag</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Can not escape!"</span><span class="o">);</span>
        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">//深度搜索递归函数</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span><span class="kt">int</span> <span class="n">y</span><span class="o">,</span><span class="kt">int</span> <span class="n">energy</span><span class="o">){</span>
        <span class="c1">//直接条件判断</span>
        <span class="k">if</span><span class="o">(</span><span class="n">energy</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="n">x</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="n">x</span><span class="o">&gt;</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">||</span><span class="n">y</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="n">y</span><span class="o">&gt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">||</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]==</span><span class="mi">0</span><span class="o">){</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">list</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"["</span><span class="o">+</span><span class="n">x</span><span class="o">+</span><span class="s">","</span><span class="o">+</span><span class="n">y</span><span class="o">+</span><span class="s">"]"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
        <span class="c1">//结果判断</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">==</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span>
            <span class="c1">//当前剩余能量还大于之前历史最大剩余能量的话</span>
            <span class="k">if</span><span class="o">(</span><span class="n">energy</span><span class="o">&gt;</span><span class="n">maxRemainEnergy</span><span class="o">){</span>
                <span class="c1">//更新历史最大剩余能量</span>
                <span class="n">maxRemainEnergy</span><span class="o">=</span><span class="n">energy</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">//更新结果集</span>
            <span class="n">update</span><span class="o">();</span>
            <span class="c1">//重置地图</span>
            <span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">list</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>
            <span class="c1">//更新状态标志</span>
            <span class="n">flag</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">//当前位置并不是最后位置,需要继续深度搜索</span>
        <span class="c1">//上边</span>
        <span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">y</span><span class="o">,</span><span class="n">energy</span><span class="o">-</span><span class="mi">3</span><span class="o">);</span>
        <span class="c1">//下边</span>
        <span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">y</span><span class="o">,</span><span class="n">energy</span><span class="o">);</span>
        <span class="c1">//左边</span>
        <span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">energy</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="c1">//右边</span>
        <span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">energy</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="c1">//当前位置下所有可能性已经搜索完了，需要回溯了</span>
        <span class="c1">//把矩阵原来标为不可通行的重新变为可通行</span>
        <span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">list</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>

    <span class="o">}</span>
    <span class="c1">//因为要回溯，所以结果集需要及时更新</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(){</span>
        <span class="c1">//遍历linkedList</span>
        <span class="nc">Iterator</span> <span class="n">iterator</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">()+</span><span class="s">","</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">//最后多加了一个逗号，把它去掉</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">res</span><span class="o">=</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

:ET