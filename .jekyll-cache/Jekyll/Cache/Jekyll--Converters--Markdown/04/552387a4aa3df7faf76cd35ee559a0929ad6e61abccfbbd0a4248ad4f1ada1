I"K <p>很久以前就听说过yolo的过人之处，直到这两天，因为需要做一个物体检测标定位置的活儿，因此不得不就这个方向的研究进行一定的学习和摸索。今天，就让我们一起来见证一下这个YOLO的神奇之处。</p>
<h5 id="介绍一下">介绍一下</h5>
<blockquote>
  <p><strong>YOLO核心思想</strong>：从R-CNN到Fast R-CNN一直采用的思路是proposal+分类 （proposal 提供位置信息， 分类提供类别信息）精度已经很高，但是速度还不行。 YOLO提供了另一种更为直接的思路： 直接在输出层回归bounding box的位置和bounding box所属的类别(整张图作为网络的输入，把 Object Detection 的问题转化成一个 Regression 问题)。</p>
</blockquote>

<blockquote>
  <p><strong>YOLO的主要特点</strong>：</p>
  <ul>
    <li>速度快，能够达到实时的要求。在 Titan X 的 GPU 上 能够达到 45 帧每秒。</li>
    <li>使用全图作为 Context 信息，背景错误（把背景错认为物体）比较少。</li>
    <li>泛化能力强。</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>网络设计</strong>
<img src="http://upload-images.jianshu.io/upload_images/10780978-50bbcc2f5e5ba1fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" class="center" />
<img src="https://upload-images.jianshu.io/upload_images/10780978-beb7971db352589a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="捕获.PNG" /></p>
</blockquote>

<p>以上内容摘自知乎<strong>@晓雷</strong>的笔记，详细内容请看<strong><a href="https://zhuanlan.zhihu.com/p/24916786">原文</a></strong>
再来看看人家官网的描述：
<img src="https://upload-images.jianshu.io/upload_images/10780978-834ada919936c33f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="捕获1.PNG" class="center" />
<img src="https://upload-images.jianshu.io/upload_images/10780978-1621f6d2b7642d13.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="捕获2.PNG" class="center" />
<img src="https://upload-images.jianshu.io/upload_images/10780978-86e4c1cb3501e483.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo.png" class="center" />
<img src="https://upload-images.jianshu.io/upload_images/10780978-588f44e75e42b98d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo1.png" class="center" /></p>

<p>嗯！非常有极客范的一个网站，蠢蠢欲动！</p>

<h5 id="看看它有多厉害">看看它有多厉害！</h5>
<p>下面是Siraj Raval的一个演示视频，我觉着可以充分说明这个YOLO有多厉害：</p>
<blockquote>
  <p>https://youtu.be/4eIBisqx9_g</p>
</blockquote>

<p>emmm~需要科学上网。</p>
<h5 id="实践之路">实践之路</h5>
<p>我的电脑是Win10 64的，所以我是在Windows上面实现的，以下以我的环境为例进行阐述。而且也是以训练好的模型进行阐述。训练自己的数据集将在之后作进一步的探索。网上也有很多Linux实现的，想尝试的同学也可以搜索实践一下。</p>
<ul>
  <li>第一步
按照文章<strong><a href="https://ganjiacheng.cn/blog/?p=300">地址</a></strong>的描述了解一个大概的流程就好，建议不要按照博主的配置走，因为原作者已经在GitHub上面进行了更新和配置说明，跟着GitHub作者的描述走更加顺利。<strong><a href="https://github.com/AlexeyAB/darknet#how-to-use">GitHub地址</a></strong>
我的配置流程主要是按照下面的描述走的：</li>
</ul>

<h3 id="how-to-compile-on-windows">How to compile on Windows:</h3>

<ol>
  <li>
    <p>If you have <strong>MSVS 2015, CUDA 9.1, cuDNN 7.0 and OpenCV 3.x</strong> (with paths: <code class="highlighter-rouge">C:\opencv_3.0\opencv\build\include</code> &amp; <code class="highlighter-rouge">C:\opencv_3.0\opencv\build\x64\vc14\lib</code>), then start MSVS, open <code class="highlighter-rouge">build\darknet\darknet.sln</code>, set <strong>x64</strong> and <strong>Release</strong>, and do the: Build -&gt; Build darknet. <strong>NOTE:</strong> If installing OpenCV, use OpenCV 3.4.0 or earlier. This is a bug in OpenCV 3.4.1 in the C API (see <a href="https://github.com/AlexeyAB/darknet/issues/500">#500</a>).</p>

    <p>1.1. Find files <code class="highlighter-rouge">opencv_world320.dll</code> and <code class="highlighter-rouge">opencv_ffmpeg320_64.dll</code> (or <code class="highlighter-rouge">opencv_world340.dll</code> and <code class="highlighter-rouge">opencv_ffmpeg340_64.dll</code>) in <code class="highlighter-rouge">C:\opencv_3.0\opencv\build\x64\vc14\bin</code> and put it near with <code class="highlighter-rouge">darknet.exe</code></p>

    <p>1.2 Check that there are <code class="highlighter-rouge">bin</code> and <code class="highlighter-rouge">include</code> folders in the <code class="highlighter-rouge">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.1</code> if aren’t, then copy them to this folder from the path where is CUDA installed</p>

    <p>1.3. To install CUDNN (speedup neural network), do the following:</p>

    <ul>
      <li>
        <p>download and install <strong>cuDNN 7.0 for CUDA 9.1</strong>: <a href="https://developer.nvidia.com/cudnn">https://developer.nvidia.com/cudnn</a></p>
      </li>
      <li>
        <p>add Windows system variable <code class="highlighter-rouge">cudnn</code> with path to CUDNN: <a href="https://hsto.org/files/a49/3dc/fc4/a493dcfc4bd34a1295fd15e0e2e01f26.jpg">https://hsto.org/files/a49/3dc/fc4/a493dcfc4bd34a1295fd15e0e2e01f26.jpg</a></p>
      </li>
    </ul>

    <p>1.4. If you want to build <strong>without CUDNN</strong> then: open <code class="highlighter-rouge">\darknet.sln</code> -&gt; (right click on project) -&gt; properties -&gt; C/C++ -&gt; Preprocessor -&gt; Preprocessor Definitions, and remove this: <code class="highlighter-rouge">CUDNN;</code></p>
  </li>
  <li>
    <p>If you have other version of <strong>CUDA (not 9.1)</strong> then open <code class="highlighter-rouge">build\darknet\darknet.vcxproj</code> by using Notepad, find 2 places with “CUDA 9.1” and change it to your CUDA-version, then do step 1</p>
  </li>
  <li>
    <p>If you <strong>don’t have GPU</strong>, but have <strong>MSVS 2015 and OpenCV 3.0</strong> (with paths: <code class="highlighter-rouge">C:\opencv_3.0\opencv\build\include</code> &amp; <code class="highlighter-rouge">C:\opencv_3.0\opencv\build\x64\vc14\lib</code>), then start MSVS, open <code class="highlighter-rouge">build\darknet\darknet_no_gpu.sln</code>, set <strong>x64</strong> and <strong>Release</strong>, and do the: Build -&gt; Build darknet_no_gpu</p>
  </li>
  <li>
    <p>If you have <strong>OpenCV 2.4.13</strong> instead of 3.0 then you should change pathes after <code class="highlighter-rouge">\darknet.sln</code> is opened</p>

    <p>4.1 (right click on project) -&gt; properties -&gt; C/C++ -&gt; General -&gt; Additional Include Directories:<code class="highlighter-rouge">C:\opencv_2.4.13\opencv\build\include</code></p>

    <p>4.2 (right click on project) -&gt; properties -&gt; Linker -&gt; General -&gt; Additional Library Directories: <code class="highlighter-rouge">C:\opencv_2.4.13\opencv\build\x64\vc14\lib</code>
<strong>*
其中需要注意的就是以上</strong>1.1<strong>的描述。基本环境编译没问题以后，就可以接着</strong><a href="https://ganjiacheng.cn/blog/?p=300">这篇文章</a>**继续进行了。后面的流程基本没什么问题</p>
    <h5 id="效果展示">效果展示</h5>
    <p>下面展示一些我的测试案例吧
程序初始化：
<img src="https://upload-images.jianshu.io/upload_images/10780978-64af58ddc6fa020e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="process.PNG" class="center" />
测试案例：
<img src="https://upload-images.jianshu.io/upload_images/10780978-eb72b88d80d46486.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test1.PNG" class="center" />
<img src="https://upload-images.jianshu.io/upload_images/10780978-9a5ed1f636d725fa.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test2.PNG" class="center" /></p>
  </li>
</ol>

<p>还是很令人激动有木有！
好了，今天介绍到此结束，后续训练自己的数据集！</p>
:ET